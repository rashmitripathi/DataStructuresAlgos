# Intuition
Only two conditions means that that the tree node is same
if both side p and q node is null
if both side p &  q node is not null and have same value
also left tree and right tree should be same

If anyone of the node is not null it is not a same free.

# Complexity
- Time complexity:
O(n)

# Code
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
       
        if(p!=null && q!=null){
             if(p.val != q.val){
                 return false;
             }
             boolean isLeftTreeSame = isSameTree(p.left, q.left);
             boolean isRightTreeSame = isSameTree(p.right, q.right);
             
            return (isLeftTreeSame && isRightTreeSame)? true: false;
        }else{
            return (p ==null && q ==null) ? true : false;
        }
      
    }
}
